from unittest import result
from flask import Blueprint, jsonify, request 
from main import db
from models.gallerys import Gallery
from schemas.gallery_schema import gallery_schema, gallerys_schema
from datetime import date

gallerys = Blueprint('gallery', __name__, url_prefix="/gallery")

# The GET routes endpoint
@gallerys.route("/", methods=["GET"])
def get_gallerys():
    # get all gallerys from the database table
    gallerys_list = Gallery.query.all()
    # Convert the gallerys from the database into a JSON format and store them in result
    result = gallerys_schema.dump(gallerys_list)
    # return the data in JSON format
    return jsonify(result)

@gallerys.route("/<int:id>", methods=["GET"])
def get_gallery(id):
    # gallery = Gallery.query.get(id)
    gallery = Gallery.query.filter_by(gallery_id=id).first()
    return jsonify(gallery_schema.dump(gallery))

# The POST route endpoint
@gallerys.route("/", methods=["POST"])
def new_gallery():
    # add a new gallery
    gallery_fields = gallery_schema.load(request.json)
    new_gallery = Gallery(
        name = gallery_fields["name"],
        location = gallery_fields["location"],
        phone_number = gallery_fields["phone_number"],
        open_hours = gallery_fields["open_hours"],
        description = gallery_fields["description"]
    )
    
    # not taken from the request, generated by the server
    new_gallery.date = date.today()

    # add to the database and commit
    db.session.add(new_gallery)
    db.session.commit()

    #return the gallery in the response
    return jsonify(gallery_schema.dump(new_gallery))

# round out our CRUD resource with a DELETE method
@gallerys.route("/<int:id>/", methods=["DELETE"])
def delete_gallery(id):
    gallery = Gallery.query.filter_by(id=id).first()
    #return an error if the card doesn't exist
    if not gallery:
        return abort(400, description="Gallery does not exist")
    #Delete the card from the database and commit
    db.session.delete(gallery)
    db.session.commit()
    #return the gallery in the response
    return jsonify(gallery_schema.dump(gallery))
    